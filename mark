import math

# Constants for the players
HUMAN = -1
AI = 1
EMPTY = 0

# Create the Tic-Tac-Toe board
board = [
    [EMPTY, EMPTY, EMPTY],
    [EMPTY, EMPTY, EMPTY],
    [EMPTY, EMPTY, EMPTY]
]

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print(" | ".join(["X" if cell == HUMAN else "O" if cell == AI else " " for cell in row]))
        print("-" * 9)

# Function to check if the game is over
def is_game_over(board):
    for row in board:
        if all(cell == HUMAN for cell in row) or all(cell == AI for cell in row):
            return True

    for col in range(3):
        if all(board[row][col] == HUMAN for row in range(3)) or all(board[row][col] == AI for row in range(3)):
            return True

    if all(board[i][i] == HUMAN for i in range(3)) or all(board[i][i] == AI for i in range(3)):
        return True

    if all(board[i][2 - i] == HUMAN for i in range(3)) or all(board[i][2 - i] == AI for i in range(3)):
        return True

    return not any(EMPTY in row for row in board)

# Function to evaluate the score of the board
def evaluate(board):
    for player in [HUMAN, AI]:
        for row in board:
            if all(cell == player for cell in row):
                return player

        for col in range(3):
            if all(board[row][col] == player for row in range(3)):
                return player

        if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
            return player

    return 0

# Function to find the best move using Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    if is_game_over(board):
        return evaluate(board)

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = AI
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = EMPTY
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = HUMAN
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = EMPTY
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

# Function to find the best move for the AI player
def find_best_move(board):
    best_move = None
    best_eval = -math.inf
    alpha = -math.inf
    beta = math.inf

    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = AI
                eval = minimax(board, 0, False, alpha, beta)
                board[i][j] = EMPTY
                if eval > best_eval:
                    best_eval = eval
                    best_move = (i, j)

    return best_move

# Main game loop
while True:
    print_board(board)

    # Human player's move
    while True:
        try:
            row = int(input("Enter the row (0, 1, or 2): "))
            col = int(input("Enter the column (0, 1, or 2): "))
            if board[row][col] == EMPTY:
                board[row][col] = HUMAN
                break
            else:
                print("That cell is already occupied. Try again.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter valid row and column numbers.")

    # Check if the human player wins
    if evaluate(board) == HUMAN:
        print_board(board)
        print("You win!")
        break

    # Check if the game is a tie
    if not any(EMPTY in row for row in board):
        print_board(board)
        print("It's a tie!")
        break

    # AI player's move
    best_move = find_best_move(board)
    board[best_move[0]][best_move[1]] = AI

    # Check if the AI player wins
    if evaluate(board) == AI:
        print_board(board)
        print("AI wins!")
        break

    # Check if the game is a tie
    if not any(EMPTY in row for row in board):
        print_board(board)
        print("It's a tie!")
        break